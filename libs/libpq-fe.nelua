##[[
  cinclude "<libpq-fe.h>"
  linklib "pq"
]]
global FILE: type <cimport,nodecl,cincomplete> = @record{}
global pg_int64: type <cimport,nodecl> = @clong
global ConnStatusType: type <cimport,nodecl,using> = @enum(cint){
  CONNECTION_OK = 0,
  CONNECTION_BAD = 1,
  CONNECTION_STARTED = 2,
  CONNECTION_MADE = 3,
  CONNECTION_AWAITING_RESPONSE = 4,
  CONNECTION_AUTH_OK = 5,
  CONNECTION_SETENV = 6,
  CONNECTION_SSL_STARTUP = 7,
  CONNECTION_NEEDED = 8,
  CONNECTION_CHECK_WRITABLE = 9,
  CONNECTION_CONSUME = 10,
  CONNECTION_GSS_STARTUP = 11,
  CONNECTION_CHECK_TARGET = 12,
  CONNECTION_CHECK_STANDBY = 13,
  CONNECTION_ALLOCATED = 14
}
global PostgresPollingStatusType: type <cimport,nodecl,using> = @enum(cint){
  PGRES_POLLING_FAILED = 0,
  PGRES_POLLING_READING = 1,
  PGRES_POLLING_WRITING = 2,
  PGRES_POLLING_OK = 3,
  PGRES_POLLING_ACTIVE = 4
}
global ExecStatusType: type <cimport,nodecl,using> = @enum(cint){
  PGRES_EMPTY_QUERY = 0,
  PGRES_COMMAND_OK = 1,
  PGRES_TUPLES_OK = 2,
  PGRES_COPY_OUT = 3,
  PGRES_COPY_IN = 4,
  PGRES_BAD_RESPONSE = 5,
  PGRES_NONFATAL_ERROR = 6,
  PGRES_FATAL_ERROR = 7,
  PGRES_COPY_BOTH = 8,
  PGRES_SINGLE_TUPLE = 9,
  PGRES_PIPELINE_SYNC = 10,
  PGRES_PIPELINE_ABORTED = 11,
  PGRES_TUPLES_CHUNK = 12
}
global PGTransactionStatusType: type <cimport,nodecl,using> = @enum(cint){
  PQTRANS_IDLE = 0,
  PQTRANS_ACTIVE = 1,
  PQTRANS_INTRANS = 2,
  PQTRANS_INERROR = 3,
  PQTRANS_UNKNOWN = 4
}
global PGVerbosity: type <cimport,nodecl,using> = @enum(cint){
  PQERRORS_TERSE = 0,
  PQERRORS_DEFAULT = 1,
  PQERRORS_VERBOSE = 2,
  PQERRORS_SQLSTATE = 3
}
global PGContextVisibility: type <cimport,nodecl,using> = @enum(cint){
  PQSHOW_CONTEXT_NEVER = 0,
  PQSHOW_CONTEXT_ERRORS = 1,
  PQSHOW_CONTEXT_ALWAYS = 2
}
global PGPing: type <cimport,nodecl,using> = @enum(cint){
  PQPING_OK = 0,
  PQPING_REJECT = 1,
  PQPING_NO_RESPONSE = 2,
  PQPING_NO_ATTEMPT = 3
}
global PGpipelineStatus: type <cimport,nodecl,using> = @enum(cint){
  PQ_PIPELINE_OFF = 0,
  PQ_PIPELINE_ON = 1,
  PQ_PIPELINE_ABORTED = 2
}
global PGconn: type <cimport,nodecl,forwarddecl> = @record{}
global PGcancelConn: type <cimport,nodecl,forwarddecl> = @record{}
global PGresult: type <cimport,nodecl,forwarddecl> = @record{}
global PGcancel: type <cimport,nodecl,forwarddecl> = @record{}
global PGnotify: type <cimport,nodecl> = @record{
  relname: cstring,
  be_pid: cint,
  extra: cstring,
  next: *PGnotify
}
global pg_usec_time_t: type <cimport,nodecl> = @pg_int64
global PQnoticeReceiver: type <cimport,nodecl> = @function(arg: pointer, res: *PGresult): void
global PQnoticeProcessor: type <cimport,nodecl> = @function(arg: pointer, message: cstring): void
global pqbool: type <cimport,nodecl> = @cchar
global PQprintOpt: type <cimport,nodecl> = @record{
  header: pqbool,
  align: pqbool,
  standard: pqbool,
  html3: pqbool,
  expanded: pqbool,
  pager: pqbool,
  fieldSep: cstring,
  tableOpt: cstring,
  caption: cstring,
  fieldName: *cstring
}
global PQconninfoOption: type <cimport,nodecl> = @record{
  keyword: cstring,
  envvar: cstring,
  compiled: cstring,
  val: cstring,
  label: cstring,
  dispchar: cstring,
  dispsize: cint
}
global PQArgBlock: type <cimport,nodecl> = @record{
  len: cint,
  isint: cint,
  u: union{
    ptr: *cint,
    integer: cint
  }
}
global PGresAttDesc: type <cimport,nodecl> = @record{
  name: cstring,
  tableid: cuint,
  columnid: cint,
  format: cint,
  typid: cuint,
  typlen: cint,
  atttypmod: cint
}
global pgthreadlock_t: type <cimport,nodecl> = @function(acquire: cint): void
global PQsslKeyPassHook_OpenSSL_type: type <cimport,nodecl> = @function(buf: cstring, size: cint, conn: *PGconn): cint
global function PQconnectStart(conninfo: cstring): *PGconn <cimport,nodecl> end
global function PQconnectStartParams(keywords: *cstring, values: *cstring, expand_dbname: cint): *PGconn <cimport,nodecl> end
global function PQconnectPoll(conn: *PGconn): PostgresPollingStatusType <cimport,nodecl> end
global function PQconnectdb(conninfo: cstring): *PGconn <cimport,nodecl> end
global function PQconnectdbParams(keywords: *cstring, values: *cstring, expand_dbname: cint): *PGconn <cimport,nodecl> end
global function PQsetdbLogin(pghost: cstring, pgport: cstring, pgoptions: cstring, pgtty: cstring, dbName: cstring, login: cstring, pwd: cstring): *PGconn <cimport,nodecl> end
global function PQfinish(conn: *PGconn): void <cimport,nodecl> end
global function PQconndefaults(): *PQconninfoOption <cimport,nodecl> end
global function PQconninfoParse(conninfo: cstring, errmsg: *cstring): *PQconninfoOption <cimport,nodecl> end
global function PQconninfo(conn: *PGconn): *PQconninfoOption <cimport,nodecl> end
global function PQconninfoFree(connOptions: *PQconninfoOption): void <cimport,nodecl> end
global function PQresetStart(conn: *PGconn): cint <cimport,nodecl> end
global function PQresetPoll(conn: *PGconn): PostgresPollingStatusType <cimport,nodecl> end
global function PQreset(conn: *PGconn): void <cimport,nodecl> end
global function PQcancelCreate(conn: *PGconn): *PGcancelConn <cimport,nodecl> end
global function PQcancelStart(cancelConn: *PGcancelConn): cint <cimport,nodecl> end
global function PQcancelBlocking(cancelConn: *PGcancelConn): cint <cimport,nodecl> end
global function PQcancelPoll(cancelConn: *PGcancelConn): PostgresPollingStatusType <cimport,nodecl> end
global function PQcancelStatus(cancelConn: *PGcancelConn): ConnStatusType <cimport,nodecl> end
global function PQcancelSocket(cancelConn: *PGcancelConn): cint <cimport,nodecl> end
global function PQcancelErrorMessage(cancelConn: *PGcancelConn): cstring <cimport,nodecl> end
global function PQcancelReset(cancelConn: *PGcancelConn): void <cimport,nodecl> end
global function PQcancelFinish(cancelConn: *PGcancelConn): void <cimport,nodecl> end
global function PQgetCancel(conn: *PGconn): *PGcancel <cimport,nodecl> end
global function PQfreeCancel(cancel: *PGcancel): void <cimport,nodecl> end
global function PQcancel(cancel: *PGcancel, errbuf: cstring, errbufsize: cint): cint <cimport,nodecl> end
global function PQrequestCancel(conn: *PGconn): cint <cimport,nodecl> end
global function PQdb(conn: *PGconn): cstring <cimport,nodecl> end
global function PQuser(conn: *PGconn): cstring <cimport,nodecl> end
global function PQpass(conn: *PGconn): cstring <cimport,nodecl> end
global function PQhost(conn: *PGconn): cstring <cimport,nodecl> end
global function PQhostaddr(conn: *PGconn): cstring <cimport,nodecl> end
global function PQport(conn: *PGconn): cstring <cimport,nodecl> end
global function PQtty(conn: *PGconn): cstring <cimport,nodecl> end
global function PQoptions(conn: *PGconn): cstring <cimport,nodecl> end
global function PQstatus(conn: *PGconn): ConnStatusType <cimport,nodecl> end
global function PQtransactionStatus(conn: *PGconn): PGTransactionStatusType <cimport,nodecl> end
global function PQparameterStatus(conn: *PGconn, paramName: cstring): cstring <cimport,nodecl> end
global function PQprotocolVersion(conn: *PGconn): cint <cimport,nodecl> end
global function PQserverVersion(conn: *PGconn): cint <cimport,nodecl> end
global function PQerrorMessage(conn: *PGconn): cstring <cimport,nodecl> end
global function PQsocket(conn: *PGconn): cint <cimport,nodecl> end
global function PQbackendPID(conn: *PGconn): cint <cimport,nodecl> end
global function PQpipelineStatus(conn: *PGconn): PGpipelineStatus <cimport,nodecl> end
global function PQconnectionNeedsPassword(conn: *PGconn): cint <cimport,nodecl> end
global function PQconnectionUsedPassword(conn: *PGconn): cint <cimport,nodecl> end
global function PQconnectionUsedGSSAPI(conn: *PGconn): cint <cimport,nodecl> end
global function PQclientEncoding(conn: *PGconn): cint <cimport,nodecl> end
global function PQsetClientEncoding(conn: *PGconn, encoding: cstring): cint <cimport,nodecl> end
global function PQsslInUse(conn: *PGconn): cint <cimport,nodecl> end
global function PQsslStruct(conn: *PGconn, struct_name: cstring): pointer <cimport,nodecl> end
global function PQsslAttribute(conn: *PGconn, attribute_name: cstring): cstring <cimport,nodecl> end
global function PQsslAttributeNames(conn: *PGconn): *cstring <cimport,nodecl> end
global function PQgetssl(conn: *PGconn): pointer <cimport,nodecl> end
global function PQinitSSL(do_init: cint): void <cimport,nodecl> end
global function PQinitOpenSSL(do_ssl: cint, do_crypto: cint): void <cimport,nodecl> end
global function PQgssEncInUse(conn: *PGconn): cint <cimport,nodecl> end
global function PQgetgssctx(conn: *PGconn): pointer <cimport,nodecl> end
global function PQsetErrorVerbosity(conn: *PGconn, verbosity: PGVerbosity): PGVerbosity <cimport,nodecl> end
global function PQsetErrorContextVisibility(conn: *PGconn, show_context: PGContextVisibility): PGContextVisibility <cimport,nodecl> end
global function PQsetNoticeReceiver(conn: *PGconn, proc: PQnoticeReceiver, arg: pointer): PQnoticeReceiver <cimport,nodecl> end
global function PQsetNoticeProcessor(conn: *PGconn, proc: PQnoticeProcessor, arg: pointer): PQnoticeProcessor <cimport,nodecl> end
global function PQregisterThreadLock(newhandler: pgthreadlock_t): pgthreadlock_t <cimport,nodecl> end
global function PQtrace(conn: *PGconn, debug_port: *FILE): void <cimport,nodecl> end
global function PQuntrace(conn: *PGconn): void <cimport,nodecl> end
global function PQsetTraceFlags(conn: *PGconn, flags: cint): void <cimport,nodecl> end
global function PQexec(conn: *PGconn, query: cstring): *PGresult <cimport,nodecl> end
global function PQexecParams(conn: *PGconn, command: cstring, nParams: cint, paramTypes: *cuint, paramValues: *cstring, paramLengths: *cint, paramFormats: *cint, resultFormat: cint): *PGresult <cimport,nodecl> end
global function PQprepare(conn: *PGconn, stmtName: cstring, query: cstring, nParams: cint, paramTypes: *cuint): *PGresult <cimport,nodecl> end
global function PQexecPrepared(conn: *PGconn, stmtName: cstring, nParams: cint, paramValues: *cstring, paramLengths: *cint, paramFormats: *cint, resultFormat: cint): *PGresult <cimport,nodecl> end
global function PQsendQuery(conn: *PGconn, query: cstring): cint <cimport,nodecl> end
global function PQsendQueryParams(conn: *PGconn, command: cstring, nParams: cint, paramTypes: *cuint, paramValues: *cstring, paramLengths: *cint, paramFormats: *cint, resultFormat: cint): cint <cimport,nodecl> end
global function PQsendPrepare(conn: *PGconn, stmtName: cstring, query: cstring, nParams: cint, paramTypes: *cuint): cint <cimport,nodecl> end
global function PQsendQueryPrepared(conn: *PGconn, stmtName: cstring, nParams: cint, paramValues: *cstring, paramLengths: *cint, paramFormats: *cint, resultFormat: cint): cint <cimport,nodecl> end
global function PQsetSingleRowMode(conn: *PGconn): cint <cimport,nodecl> end
global function PQsetChunkedRowsMode(conn: *PGconn, chunkSize: cint): cint <cimport,nodecl> end
global function PQgetResult(conn: *PGconn): *PGresult <cimport,nodecl> end
global function PQisBusy(conn: *PGconn): cint <cimport,nodecl> end
global function PQconsumeInput(conn: *PGconn): cint <cimport,nodecl> end
global function PQenterPipelineMode(conn: *PGconn): cint <cimport,nodecl> end
global function PQexitPipelineMode(conn: *PGconn): cint <cimport,nodecl> end
global function PQpipelineSync(conn: *PGconn): cint <cimport,nodecl> end
global function PQsendFlushRequest(conn: *PGconn): cint <cimport,nodecl> end
global function PQsendPipelineSync(conn: *PGconn): cint <cimport,nodecl> end
global function PQnotifies(conn: *PGconn): *PGnotify <cimport,nodecl> end
global function PQputCopyData(conn: *PGconn, buffer: cstring, nbytes: cint): cint <cimport,nodecl> end
global function PQputCopyEnd(conn: *PGconn, errormsg: cstring): cint <cimport,nodecl> end
global function PQgetCopyData(conn: *PGconn, buffer: *cstring, async: cint): cint <cimport,nodecl> end
global function PQgetline(conn: *PGconn, buffer: cstring, length: cint): cint <cimport,nodecl> end
global function PQputline(conn: *PGconn, string: cstring): cint <cimport,nodecl> end
global function PQgetlineAsync(conn: *PGconn, buffer: cstring, bufsize: cint): cint <cimport,nodecl> end
global function PQputnbytes(conn: *PGconn, buffer: cstring, nbytes: cint): cint <cimport,nodecl> end
global function PQendcopy(conn: *PGconn): cint <cimport,nodecl> end
global function PQsetnonblocking(conn: *PGconn, arg: cint): cint <cimport,nodecl> end
global function PQisnonblocking(conn: *PGconn): cint <cimport,nodecl> end
global function PQisthreadsafe(): cint <cimport,nodecl> end
global function PQping(conninfo: cstring): PGPing <cimport,nodecl> end
global function PQpingParams(keywords: *cstring, values: *cstring, expand_dbname: cint): PGPing <cimport,nodecl> end
global function PQflush(conn: *PGconn): cint <cimport,nodecl> end
global function PQfn(conn: *PGconn, fnid: cint, result_buf: *cint, result_len: *cint, result_is_int: cint, args: *PQArgBlock, nargs: cint): *PGresult <cimport,nodecl> end
global function PQresultStatus(res: *PGresult): ExecStatusType <cimport,nodecl> end
global function PQresStatus(status: ExecStatusType): cstring <cimport,nodecl> end
global function PQresultErrorMessage(res: *PGresult): cstring <cimport,nodecl> end
global function PQresultVerboseErrorMessage(res: *PGresult, verbosity: PGVerbosity, show_context: PGContextVisibility): cstring <cimport,nodecl> end
global function PQresultErrorField(res: *PGresult, fieldcode: cint): cstring <cimport,nodecl> end
global function PQntuples(res: *PGresult): cint <cimport,nodecl> end
global function PQnfields(res: *PGresult): cint <cimport,nodecl> end
global function PQbinaryTuples(res: *PGresult): cint <cimport,nodecl> end
global function PQfname(res: *PGresult, field_num: cint): cstring <cimport,nodecl> end
global function PQfnumber(res: *PGresult, field_name: cstring): cint <cimport,nodecl> end
global function PQftable(res: *PGresult, field_num: cint): cuint <cimport,nodecl> end
global function PQftablecol(res: *PGresult, field_num: cint): cint <cimport,nodecl> end
global function PQfformat(res: *PGresult, field_num: cint): cint <cimport,nodecl> end
global function PQftype(res: *PGresult, field_num: cint): cuint <cimport,nodecl> end
global function PQfsize(res: *PGresult, field_num: cint): cint <cimport,nodecl> end
global function PQfmod(res: *PGresult, field_num: cint): cint <cimport,nodecl> end
global function PQcmdStatus(res: *PGresult): cstring <cimport,nodecl> end
global function PQoidStatus(res: *PGresult): cstring <cimport,nodecl> end
global function PQoidValue(res: *PGresult): cuint <cimport,nodecl> end
global function PQcmdTuples(res: *PGresult): cstring <cimport,nodecl> end
global function PQgetvalue(res: *PGresult, tup_num: cint, field_num: cint): cstring <cimport,nodecl> end
global function PQgetlength(res: *PGresult, tup_num: cint, field_num: cint): cint <cimport,nodecl> end
global function PQgetisnull(res: *PGresult, tup_num: cint, field_num: cint): cint <cimport,nodecl> end
global function PQnparams(res: *PGresult): cint <cimport,nodecl> end
global function PQparamtype(res: *PGresult, param_num: cint): cuint <cimport,nodecl> end
global function PQdescribePrepared(conn: *PGconn, stmt: cstring): *PGresult <cimport,nodecl> end
global function PQdescribePortal(conn: *PGconn, portal: cstring): *PGresult <cimport,nodecl> end
global function PQsendDescribePrepared(conn: *PGconn, stmt: cstring): cint <cimport,nodecl> end
global function PQsendDescribePortal(conn: *PGconn, portal: cstring): cint <cimport,nodecl> end
global function PQclosePrepared(conn: *PGconn, stmt: cstring): *PGresult <cimport,nodecl> end
global function PQclosePortal(conn: *PGconn, portal: cstring): *PGresult <cimport,nodecl> end
global function PQsendClosePrepared(conn: *PGconn, stmt: cstring): cint <cimport,nodecl> end
global function PQsendClosePortal(conn: *PGconn, portal: cstring): cint <cimport,nodecl> end
global function PQclear(res: *PGresult): void <cimport,nodecl> end
global function PQfreemem(ptr: pointer): void <cimport,nodecl> end
global function PQmakeEmptyPGresult(conn: *PGconn, status: ExecStatusType): *PGresult <cimport,nodecl> end
global function PQcopyResult(src: *PGresult, flags: cint): *PGresult <cimport,nodecl> end
global function PQsetResultAttrs(res: *PGresult, numAttributes: cint, attDescs: *PGresAttDesc): cint <cimport,nodecl> end
global function PQresultAlloc(res: *PGresult, nBytes: csize): pointer <cimport,nodecl> end
global function PQresultMemorySize(res: *PGresult): csize <cimport,nodecl> end
global function PQsetvalue(res: *PGresult, tup_num: cint, field_num: cint, value: cstring, len: cint): cint <cimport,nodecl> end
global function PQescapeStringConn(conn: *PGconn, to: cstring, from: cstring, length: csize, error: *cint): csize <cimport,nodecl> end
global function PQescapeLiteral(conn: *PGconn, str: cstring, len: csize): cstring <cimport,nodecl> end
global function PQescapeIdentifier(conn: *PGconn, str: cstring, len: csize): cstring <cimport,nodecl> end
global function PQescapeByteaConn(conn: *PGconn, from: *cuchar, from_length: csize, to_length: *csize): *cuchar <cimport,nodecl> end
global function PQunescapeBytea(strtext: *cuchar, retbuflen: *csize): *cuchar <cimport,nodecl> end
global function PQescapeString(to: cstring, from: cstring, length: csize): csize <cimport,nodecl> end
global function PQescapeBytea(from: *cuchar, from_length: csize, to_length: *csize): *cuchar <cimport,nodecl> end
global function PQprint(fout: *FILE, res: *PGresult, po: *PQprintOpt): void <cimport,nodecl> end
global function PQdisplayTuples(res: *PGresult, fp: *FILE, fillAlign: cint, fieldSep: cstring, printHeader: cint, quiet: cint): void <cimport,nodecl> end
global function PQprintTuples(res: *PGresult, fout: *FILE, PrintAttNames: cint, TerseOutput: cint, colWidth: cint): void <cimport,nodecl> end
global function lo_open(conn: *PGconn, lobjId: cuint, mode: cint): cint <cimport,nodecl> end
global function lo_close(conn: *PGconn, fd: cint): cint <cimport,nodecl> end
global function lo_read(conn: *PGconn, fd: cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function lo_write(conn: *PGconn, fd: cint, buf: cstring, len: csize): cint <cimport,nodecl> end
global function lo_lseek(conn: *PGconn, fd: cint, offset: cint, whence: cint): cint <cimport,nodecl> end
global function lo_lseek64(conn: *PGconn, fd: cint, offset: pg_int64, whence: cint): pg_int64 <cimport,nodecl> end
global function lo_creat(conn: *PGconn, mode: cint): cuint <cimport,nodecl> end
global function lo_create(conn: *PGconn, lobjId: cuint): cuint <cimport,nodecl> end
global function lo_tell(conn: *PGconn, fd: cint): cint <cimport,nodecl> end
global function lo_tell64(conn: *PGconn, fd: cint): pg_int64 <cimport,nodecl> end
global function lo_truncate(conn: *PGconn, fd: cint, len: csize): cint <cimport,nodecl> end
global function lo_truncate64(conn: *PGconn, fd: cint, len: pg_int64): cint <cimport,nodecl> end
global function lo_unlink(conn: *PGconn, lobjId: cuint): cint <cimport,nodecl> end
global function lo_import(conn: *PGconn, filename: cstring): cuint <cimport,nodecl> end
global function lo_import_with_oid(conn: *PGconn, filename: cstring, lobjId: cuint): cuint <cimport,nodecl> end
global function lo_export(conn: *PGconn, lobjId: cuint, filename: cstring): cint <cimport,nodecl> end
global function PQlibVersion(): cint <cimport,nodecl> end
global function PQsocketPoll(sock: cint, forRead: cint, forWrite: cint, end_time: pg_usec_time_t): cint <cimport,nodecl> end
global function PQgetCurrentTimeUSec(): pg_usec_time_t <cimport,nodecl> end
global function PQmblen(s: cstring, encoding: cint): cint <cimport,nodecl> end
global function PQmblenBounded(s: cstring, encoding: cint): cint <cimport,nodecl> end
global function PQdsplen(s: cstring, encoding: cint): cint <cimport,nodecl> end
global function PQenv2encoding(): cint <cimport,nodecl> end
global function PQencryptPassword(passwd: cstring, user: cstring): cstring <cimport,nodecl> end
global function PQencryptPasswordConn(conn: *PGconn, passwd: cstring, user: cstring, algorithm: cstring): cstring <cimport,nodecl> end
global function PQchangePassword(conn: *PGconn, user: cstring, passwd: cstring): *PGresult <cimport,nodecl> end
global function pg_char_to_encoding(name: cstring): cint <cimport,nodecl> end
global function pg_encoding_to_char(encoding: cint): cstring <cimport,nodecl> end
global function pg_valid_server_encoding_id(encoding: cint): cint <cimport,nodecl> end
global function PQgetSSLKeyPassHook_OpenSSL(): PQsslKeyPassHook_OpenSSL_type <cimport,nodecl> end
global function PQsetSSLKeyPassHook_OpenSSL(hook: PQsslKeyPassHook_OpenSSL_type): void <cimport,nodecl> end
global function PQdefaultSSLKeyPassHook_OpenSSL(buf: cstring, size: cint, conn: *PGconn): cint <cimport,nodecl> end
global PG_INT64_TYPE: type = clong
global PG_DIAG_SEVERITY: cchar <comptime> = 83
global PG_DIAG_SEVERITY_NONLOCALIZED: cchar <comptime> = 86
global PG_DIAG_SQLSTATE: cchar <comptime> = 67
global PG_DIAG_MESSAGE_PRIMARY: cchar <comptime> = 77
global PG_DIAG_MESSAGE_DETAIL: cchar <comptime> = 68
global PG_DIAG_MESSAGE_HINT: cchar <comptime> = 72
global PG_DIAG_STATEMENT_POSITION: cchar <comptime> = 80
global PG_DIAG_INTERNAL_POSITION: cchar <comptime> = 112
global PG_DIAG_INTERNAL_QUERY: cchar <comptime> = 113
global PG_DIAG_CONTEXT: cchar <comptime> = 87
global PG_DIAG_SCHEMA_NAME: cchar <comptime> = 115
global PG_DIAG_TABLE_NAME: cchar <comptime> = 116
global PG_DIAG_COLUMN_NAME: cchar <comptime> = 99
global PG_DIAG_DATATYPE_NAME: cchar <comptime> = 100
global PG_DIAG_CONSTRAINT_NAME: cchar <comptime> = 110
global PG_DIAG_SOURCE_FILE: cchar <comptime> = 70
global PG_DIAG_SOURCE_LINE: cchar <comptime> = 76
global PG_DIAG_SOURCE_FUNCTION: cchar <comptime> = 82
global LIBPQ_HAS_PIPELINING: cint <comptime> = 1
global LIBPQ_HAS_TRACE_FLAGS: cint <comptime> = 1
global LIBPQ_HAS_SSL_LIBRARY_DETECTION: cint <comptime> = 1
global LIBPQ_HAS_ASYNC_CANCEL: cint <comptime> = 1
global LIBPQ_HAS_CHANGE_PASSWORD: cint <comptime> = 1
global LIBPQ_HAS_CHUNK_MODE: cint <comptime> = 1
global LIBPQ_HAS_CLOSE_PREPARED: cint <comptime> = 1
global LIBPQ_HAS_SEND_PIPELINE_SYNC: cint <comptime> = 1
global LIBPQ_HAS_SOCKET_POLL: cint <comptime> = 1
global PG_COPYRES_ATTRS: cint <comptime> = 1
global PG_COPYRES_TUPLES: cint <comptime> = 2
global PG_COPYRES_EVENTS: cint <comptime> = 4
global PG_COPYRES_NOTICEHOOKS: cint <comptime> = 8
global PQTRACE_SUPPRESS_TIMESTAMPS: cint <comptime> = 1
global PQTRACE_REGRESS_MODE: cint <comptime> = 2
global PQ_QUERY_PARAM_MAX_LIMIT: cint <comptime> = 65535
global PQnoPasswordSupplied: cstring <comptime> = "fe_sendauth: no password supplied\n"
global function PQfreeNotify(ptr: pointer)
  PQfreemem(ptr)
end
