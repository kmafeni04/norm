require "io"

local sqlite = require ".utils.sqlite"

local norm = @record{}

local norm.DbKind = @enum{
  not_set = 0,
  sqlite,
  pg,
  mysql
}

local norm.Config = @record{
  kind: norm.DbKind,
  sqlite: record{
    name: string
  },
  postgress: record{},
  mysql: record{}
}

local Db = @record{
  kind: norm.DbKind,
  sqlite_db: *sqlite.type
}

function Db:destroy()
  switch self.kind do
    case norm.DbKind.sqlite then
      sqlite.destroy(self.sqlite_db)
  end
end

local DbClause = @record{
  name: string,
  val: string
}

function Db.clause(clause: sequence(DbClause)): string
  local sb: stringbuilder
  for _, v in ipairs(clause) do
    sb:write(("%s %s "):format(v.name, v.val))
    sb:write("AND ")
  end
  sb:rollback(#("AND "))
  return sb:promote()
end

function Db:query(sql: string): (sequence(hashmap(string, string)), string)
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.query(self.sqlite_db, sql)
  end
  return {}, "UNREACHABLE"
end

function Db:select(sql: string): (sequence(hashmap(string, string)), string)
  return self:query("SELECT " .. sql)
end

local norm.Db = Db

function norm.new(conf: norm.Config): (norm.Db, string)
  switch conf.kind do
    case norm.DbKind.not_set then      
      return {}, "DB object not initialised"
    case norm.DbKind.sqlite then
      local sqlite_db, err = sqlite.new(conf.sqlite.name)
      if err ~= "" then return {}, err end
    return {kind = conf.kind, sqlite_db = sqlite_db}, ""
  end
  return {}, "UNREACHABLE"
end

local Schema = @record{}
local Schema.Migration = @record{
  id: string,
  fn: function(db: norm.Db): (string)
}

local Schema.ColumnOptions = @record{
  default_val: string,
  is_null: boolean,
  unique: boolean,
  primary_key: boolean
}

local Schema.ColumnType = @enum{
  not_set = 0,
  integer,
  numeric,
  real,
  text,
  blob,
  any
}

local function schema_type_tostring(st: Schema.ColumnType, opts: Schema.ColumnOptions): string
  local sb: stringbuilder
  switch st do
    case Schema.ColumnType.integer then
      sb:write("INTEGER ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.numeric then
      sb:write("NUMERIC ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.real then
      sb:write("REAL ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.text then
      sb:write("TEXT ")
    case Schema.ColumnType.blob then
      sb:write("BLOB ")
    case Schema.ColumnType.any then
      sb:write("ANY ")
    else
      error("invalid Schema.Type: " .. st)
  end
  if not opts.is_null then
    sb:write("NOT NULL ")
  end
  if opts.default_val ~= "" then
    sb:write("DEFAULT " .. opts.default_val .. " ")
  end
  if opts.unique then
    sb:write("UNIQUE ")
  end
  if opts.primary_key then
    sb:write("PRIMARY KEY ")
  end
  sb:rollback(1)
  return sb:promote()
end

local Schema.Column = @record{
  name: string,
  type: Schema.ColumnType,
  opts: Schema.ColumnOptions
}

local function db_run(db: Db, sql: string): string
  switch db.kind do
    case norm.DbKind.sqlite then
      return sqlite.run(db.sqlite_db, sql)
    else
      return "UNREACHABLE"
  end
end

local function db_start_transaction(db: Db)
  switch db.kind do
    case norm.DbKind.sqlite then
      return sqlite.begin_transaction(db.sqlite_db)
    else
      return "UNREACHABLE"
  end
end

local function db_get_migrated(db: Db): hashmap(string, boolean)
  local migrated: hashmap(string, boolean)
  local sql = "SELECT migration FROM \"norm_migrations\""
  print(sql)
  local query_rows, query_err = db:query(sql)
  if query_err ~= "" then
    return migrated
  end
  for _, col in ipairs(query_rows) do
    migrated[col["migration"]] = true
  end
  return migrated
end

local function db_migrate(db: Db, migrated: hashmap(string, boolean), migrations: sequence(Schema.Migration)): (uinteger, string)
  local ran_migrations: uinteger
  for _, v in pairs(migrations) do
    if not migrated:has(v.id) then
      print("Migrating: " .. v.id)
      switch db.kind do
        case norm.DbKind.sqlite then
          local vals: hashmap(string, string)
          vals["migration"] = v.id
          sqlite.insert(db.sqlite_db, "norm_migrations", vals)
      end
      local create_err = v.fn(db)
      if create_err ~= "" then
        return 0, create_err
      end
      ran_migrations = ran_migrations + 1
    end
  end
  return ran_migrations, ""
end

local function db_commit_or_rollback(db: Db, err: string, ran_migrations: uinteger)
  switch db.kind do
    case norm.DbKind.sqlite then
      if err ~= "" then
        print("Failed to migrate: " .. err)
        sqlite.rollback(db.sqlite_db)
        print("Rolling back")
      else
        sqlite.commit(db.sqlite_db)
        print(("Ran %d migrations"):format(ran_migrations))
      end
  end
end

function Schema.create_table(db: norm.Db, name: string, columns: sequence(Schema.Column)): string
  assert(name ~= "", "table name cannot be an empty string")
  assert(#columns > 0, "Cannot have an empty list of columns")
  local sb: stringbuilder
  sb:write("CREATE TABLE IF NOT EXISTS \"" .. name .. "\" (\n")
  for i, v in ipairs(columns) do
    assert(v.name ~= "", "column name cannot be an empty string")
    sb:write(('  "%s" %s,\n'):format(v.name, schema_type_tostring(v.type, v.opts)))
  end
  sb:rollback(2)
  sb:write("\n);")
  local sql = sb:promote()
  print(sql)

  return db_run(db, sql)
end

local function db_create_migration_table(db: Db)
  switch db.kind do
    case norm.DbKind.sqlite then
      if not sqlite.table_exists(db.sqlite_db, "norm_migrations") then
        print("Creating migrations table")
        Schema.create_table(db, "norm_migrations", {
          {"id", Schema.ColumnType.integer, { primary_key = true }},
          {"migration", Schema.ColumnType.integer, { unique = true }}
        })
      end
  end
end

local norm.Schema = Schema

function norm.migrate(db: norm.Db, migrations: sequence(Schema.Migration))
  print("Running migrations")
  db_create_migration_table(db)
  local err = db_start_transaction(db)
  local migrated = db_get_migrated(db)
  local ran_migrations, err = db_migrate(db, migrated, migrations)
  db_commit_or_rollback(db, err, ran_migrations)
end

local db, err = norm.new({
  kind = norm.DbKind.sqlite,
  sqlite = {
    name = "hello.db"
  }
})

assert(err == "", err)

local migrations: hashmap(string, norm.Schema.Migration)
local schema = norm.Schema
local type = schema.ColumnType
norm.migrate(db, {
  {
    "11",
    function(db: norm.Db): string
      local err = schema.create_table(db, "players", {
        {"id", type.integer, { primary_key = true }},
        {"name", type.text},
        {"balance", type.real}
      })
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "21",
    function(db: norm.Db): string
      local err = schema.create_table(db, "players", {
        {"name", type.text, { primary_key = true }},
        {"id", type.integer},
        {"balance", type.real}
      })
      if err ~= "" then
        return err
      end

      return ""
    end
  }
})
