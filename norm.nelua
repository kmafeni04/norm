require "io"

local base = require ".utils.base"
local sqlite = require ".utils.sqlite"

local norm = @record{}

local norm.DbKind = @enum{
  not_set = 0,
  sqlite,
  pg,
  mysql
}

local norm.Config = @record{
  kind: norm.DbKind,
  sqlite: record{
    name: string
  },
  postgress: record{},
  mysql: record{}
}

local Db = @record{
  kind: norm.DbKind,
  sqlite_db: *sqlite.type
}

function Db:destroy()
  switch self.kind do
    case norm.DbKind.sqlite then
      sqlite.destroy(self.sqlite_db)
  end
end

function Db:table_exists(name: string): boolean
  switch self.kind do
    case norm.DbKind.sqlite then
      return sqlite.table_exists(self.sqlite_db, name)
  end
  return false
end

function Db:query(sql: string, params: hashmap(string, string)): (sequence(hashmap(string, string)), string)
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.query(self.sqlite_db, sql, params)
  end
  return {}, "UNREACHABLE"
end

function Db:select(sql: string, conditions: hashmap(string, string)): (sequence(hashmap(string, string)), string)
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.select(self.sqlite_db, sql, conditions)
  end
  return {}, "UNREACHABLE"
end

function Db:insert(table_name: string, values: hashmap(string, string)): string
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.insert(self.sqlite_db, table_name, values)
  end
  return "UNREACHABLE"
end

function Db:update(table_name: string, conditions: hashmap(string, string)): string
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.update(self.sqlite_db, table_name, conditions)
  end
  return "UNREACHABLE"
end


function Db:delete(table_name: string, conditions: hashmap(string, string)): string
  switch self.kind do
    case norm.DbKind.sqlite then
    return sqlite.delete(self.sqlite_db, table_name, conditions)
  end
  return "UNREACHABLE"
end

local norm.Db = Db

function norm.new(conf: norm.Config): (norm.Db, string)
  switch conf.kind do
    case norm.DbKind.not_set then      
      return {}, "DB object not initialised"
    case norm.DbKind.sqlite then
      local sqlite_db, err = sqlite.new(conf.sqlite.name)
      if err ~= "" then return {}, err end
    return {kind = conf.kind, sqlite_db = sqlite_db}, ""
  end
  return {}, "UNREACHABLE"
end

local Schema = @record{}
local Schema.Migration = @record{
  name: string,
  fn: function(db: norm.Db): (string)
}

local Schema.ColumnOptions = @record{
  default_val: string,
  is_null: boolean,
  unique: boolean,
  primary_key: boolean
}

local Schema.ColumnType = @enum{
  not_set = 0,
  integer,
  numeric,
  real,
  text,
  blob,
  any
}

local function schema_type_tostring(st: Schema.ColumnType, opts: Schema.ColumnOptions): string
  local sb: stringbuilder
  switch st do
    case Schema.ColumnType.integer then
      sb:write("INTEGER ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.numeric then
      sb:write("NUMERIC ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.real then
      sb:write("REAL ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case Schema.ColumnType.text then
      sb:write("TEXT ")
    case Schema.ColumnType.blob then
      sb:write("BLOB ")
    case Schema.ColumnType.any then
      sb:write("ANY ")
    else
      error("invalid Schema.Type: " .. st)
  end
  if not opts.is_null then
    sb:write("NOT NULL ")
  end
  if opts.default_val ~= "" then
    sb:write("DEFAULT " .. opts.default_val .. " ")
  end
  if opts.unique then
    sb:write("UNIQUE ")
  end
  if opts.primary_key then
    sb:write("PRIMARY KEY ")
  end
  sb:rollback(1)
  return sb:promote()
end

local Schema.Column = @record{
  name: string,
  type: Schema.ColumnType,
  opts: Schema.ColumnOptions
}

local function db_run(db: Db, sql: string): string
  switch db.kind do
    case norm.DbKind.sqlite then
      return sqlite.run(db.sqlite_db, sql)
    else
      return "UNREACHABLE"
  end
end

local function db_start_transaction(db: Db)
  switch db.kind do
    case norm.DbKind.sqlite then
      return sqlite.begin_transaction(db.sqlite_db)
    else
      return "UNREACHABLE"
  end
end

local function db_get_migrated(db: Db): hashmap(string, boolean)
  local migrated: hashmap(string, boolean)
  local sql = "SELECT migration FROM \"norm_migrations\""
  local query_rows, query_err = db:query(sql)
  if query_err ~= "" then
    return migrated
  end
  for _, col in ipairs(query_rows) do
    migrated[col["migration"]] = true
  end
  for _, col in ipairs(query_rows) do
    for k in pairs(col) do
      k:destroy()
    end
  end
  return migrated
end

local function db_migrate(db: Db, migrated: hashmap(string, boolean), migrations: sequence(Schema.Migration)): (uinteger, string)
  local ran_migrations: uinteger
  for _, v in ipairs(migrations) do
    if not migrated:has(v.name) then
      print("Migrating: " .. v.name)
      switch db.kind do
        case norm.DbKind.sqlite then
          local vals: hashmap(string, string)
          vals["migration"] = v.name
          sqlite.insert(db.sqlite_db, "norm_migrations", vals)
          for k in pairs(migrated) do
            k:destroy()
          end
      end
      local create_err = v.fn(db)
      if create_err ~= "" then
        return 0, create_err
      end
      ran_migrations = ran_migrations + 1
    end
  end
  return ran_migrations, ""
end

local function db_commit_or_rollback(db: Db, err: string, ran_migrations: uinteger)
  switch db.kind do
    case norm.DbKind.sqlite then
      if err ~= "" then
        print("Failed to migrate: " .. err)
        sqlite.rollback(db.sqlite_db)
        print("Rolling back")
      else
        sqlite.commit(db.sqlite_db)
        print(("Ran %d migrations"):format(ran_migrations))
      end
  end
end

function Schema.create_table(db: norm.Db, name: string, columns: sequence(Schema.Column)): string
  assert(name ~= "", "table name cannot be an empty string")
  assert(#columns > 0, "Cannot have an empty list of columns")
  local sb: stringbuilder
  sb:write("CREATE TABLE IF NOT EXISTS \"" .. name .. "\" (\n")
  for i, v in ipairs(columns) do
    assert(v.name ~= "", "column name cannot be an empty string")
    sb:write(('  "%s" %s,\n'):format(v.name, schema_type_tostring(v.type, v.opts)))
  end
  sb:rollback(2)
  sb:write("\n)")
  local sql = sb:promote()

  return db_run(db, sql)
end

function Schema.drop_table(db: norm.Db, name: string)
  local sql = ('DROP TABLE IF EXISTS "%s";'):format(name)
  return db_run(db, sql)
end

function Schema.raw(db: norm.Db, sql: string)
  return db_run(db, sql)
end

local Schema.IndexOpts = @record{
  where: string,
  unique: boolean,
  if_not_exists: boolean
}

function Schema.create_index(db: norm.Db, name: string, cols: sequence(string), opts: Schema.IndexOpts)
  local sb: stringbuilder
  assert(#cols > 0)
  if opts.unique then
    sb:write("CREATE UNIQUE INDEX ")
  else
    sb:write("CREATE INDEX ")
  end
  if opts.if_not_exists then
    sb:write("IF NOT EXISTS ")
  end
  sb:writef('"%s', name)
  for _, v in ipairs(cols) do
    sb:writef("_%s", v)
  end
  sb:writef("_idx\" ON %s (", base.escape_identifier(name))
  for i, v in ipairs(cols) do
    sb:write(base.escape_identifier(v))
    if not (i == #cols) then
      sb:write(", ")
    end
  end
  sb:write(")")
  if opts.where ~= "" then
    sb:write(" WHERE ", opts.where)
  end
  local final = sb:promote()
  return db_run(db, final)
end

function Schema.drop_index(db: norm.Db, name: string, cols: sequence(string))
  local sb: stringbuilder
  sb:write("DROP INDEX IF EXISTS \"")
  sb:write(name)
  for _, v in ipairs(cols) do
    sb:writef("_%s", v)
  end
  sb:writef("_idx\"")

  local final = sb:promote()
  return db_run(db, final)
end

local function db_create_migration_table(db: Db)
  switch db.kind do
    case norm.DbKind.sqlite then
      if not sqlite.table_exists(db.sqlite_db, "norm_migrations") then
        print("Creating migrations table")
        Schema.create_table(db, "norm_migrations", {
          {"migration", Schema.ColumnType.text, { primary_key = true }}
        })
      end
  end
end

local norm.Schema = Schema

function norm.migrate(db: norm.Db, migrations: sequence(Schema.Migration))
  print("Running migrations")
  db_create_migration_table(db)
  local err = db_start_transaction(db)
  local migrated = db_get_migrated(db)
  local ran_migrations, err = db_migrate(db, migrated, migrations)
  db_commit_or_rollback(db, err, ran_migrations)
end

local db, err = norm.new({
  kind = norm.DbKind.sqlite,
  sqlite = {
    name = "hello.db"
  }
})

assert(err == "", err)

local migrations: hashmap(string, norm.Schema.Migration)
local schema = norm.Schema
local type = schema.ColumnType
norm.migrate(db, {
  {
    "1",
    function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        {"id", type.integer, { primary_key = true }},
        {"name", type.text, { unique = true }},
        {"age", type.integer}
      })
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "2",
    function(db: norm.Db): string
      local err = schema.create_table(db, "players", {
        {"id", type.integer, { primary_key = true }},
        {"name", type.text, { unique = true }},
        {"age", type.integer}
      })
      if err ~= "" then
        return err
      end
      local err = Schema.create_index(db, "users", {"name", "age"}, {unique = true})
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "3",
    function(db: norm.Db): string
      local err = schema.drop_table(db, "players")
      if err ~= "" then
        return err
      end
      local err = Schema.drop_index(db, "users", {"name", "age"})
      if err ~= "" then
        return err
      end

      return ""
    end
  }
})

local users_insert: hashmap(string, string)
users_insert["name"] = "James"
users_insert["age"] = "21"
local err = db:insert("users", users_insert)
assert(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
assert(err == "", err)

for i, cols in ipairs(rows) do
  for k, v in pairs(cols) do
    print(k, v)
  end
end

local users_delete: hashmap(string, string)
users_delete["name"] = "James"
users_delete["age"] = "21"
local err = db:delete("users", users_delete)
assert(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
assert(err == "", err)

for i, cols in ipairs(rows) do
  for k, v in pairs(cols) do
    print(k, v)
  end
end

print(db:table_exists("users"))
