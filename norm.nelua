--- ## norm.nelua
require "io"

local base = require ".utils.base"
local sqlite = require ".utils.sqlite"
local pg = require ".utils.pg"

--- ### norm
--- The norm module
---`
local norm = @record{}
---`

--- ### norm.destroy_rows
--- See [base.nelua](#basenelua)
---`
local norm.destroy_rows = base.destroy_rows
---`

--- ### norm.escape_identifier
--- See [base.nelua](#basenelua)
---`
local norm.escape_identifier = base.escape_identifier
---`

--- ### norm.escape_literal
--- See [base.nelua](#basenelua)
---`
local norm.escape_literal = base.escape_literal
---`

--- ### norm.DbKind
--- Enum used to specify what database is connected in the [norm.Db](#normdb) module
---`
local norm.DbKind = @enum{
  not_set = 0,
  sqlite,
  pg,
  mysql
}
---`

--- ### norm.Config
--- This record is used to configure the ORM on what database should be connected
---`
local norm.Config = @record{
  kind: norm.DbKind,
  conn: union{
    sqlite: record{
      name: string
    },
    pg: record{
      name: string,
      user: string,
      password: string,
      host: string,
      port: string
    },
    mysql: record{}
  }
}
---`

--- ### norm.Db
--- This module is a collection of functions to make queries to the database
---`
local norm.Db = @record{
  kind: norm.DbKind,
  conn: union{
    sqlite_db: *sqlite.type,
    pg_db: *pg.type
  }
}
---`

--- ### norm.Db.new
--[[-
This function returns a new [norm.Db](#normdb) object and an error string
If no error occurs, an empty string is returned 
-]]
---`
function norm.Db.new(conf: norm.Config): (norm.Db, string)
---`
  switch conf.kind do
    case norm.DbKind.not_set then      
      return {}, "DB object not initialised"
    case norm.DbKind.sqlite then
      local sqlite_db, err = sqlite.new(conf.conn.sqlite.name)
      if err ~= "" then return {}, err end
      return {kind = conf.kind, conn = {sqlite_db = sqlite_db}}, ""
    case norm.DbKind.pg then
      local info = conf.conn.pg
      info.user = info.user ~= "" and info.user or "postgres"
      info.host = info.host ~= "" and info.host or "127.0.0.1"
      info.port = info.port ~= "" and info.port or "5432"
      local conn_info = ("dbname=%s user=%s password=%s host=%s port=%s"):format(info.name, info.user, info.password, info.host, info.port)
      local pg_db, err = pg.new(conn_info)
      if err ~= "" then return {}, err end
      return {kind = conf.kind, conn= {pg_db = pg_db}}, ""
  end
  return {}, "UNREACHABLE"
end


--- ### norm.Db:destroy
--- This function cleans up the memory used by the Db object
---`
function norm.Db:destroy()
---`
  switch self.kind do
    case norm.DbKind.sqlite then
      sqlite.destroy(self.conn.sqlite_db)
    case norm.DbKind.pg then
      pg.destroy(self.conn.pg_db)
  end
end

--- ### norm.Db:query
--[[-
Sends a query to the database returning a sequence(rows) of hashmap(columns) and a string
In the case of an error, a non empty string is returned describing the error
All further Db functions are constructed around this function
-]]
---`
function norm.Db:query(sql: string): (sequence(hashmap(string, string)), string)
---`
  switch self.kind do
    case norm.DbKind.sqlite then
      return sqlite.query(self.conn.sqlite_db, sql)
    case norm.DbKind.pg then
      return pg.query(self.conn.pg_db, sql)
  end
  return {}, "UNREACHABLE"
end

--- ### norm.Db:table_exists
--- This function checks if a table exists in the database returning a `true` if it does, `false` otherwise
---`
function norm.Db:table_exists(name: string): boolean
---`
  local sql: string
  switch self.kind do
    case norm.DbKind.sqlite then
      sql = ("SELECT \"name\" FROM sqlite_master WHERE type='table' AND name=%s"):format(norm.escape_literal(name))
    case norm.DbKind.pg then
      sql = ("SELECT tablename FROM pg_catalog.pg_tables WHERE tablename = %s"):format(norm.escape_literal(name))
    else
      error("UNIMPLEMENTED")
  end
  local rows, err = self:query(sql)
  local res = #rows > 0
  norm.destroy_rows(rows)
  return res
end

--- ### norm.Db:select
--[[-
This function at it's simplest just append "SELECT" to a query
Optionally, you can pass `where` to the query which will append a "WHERE" clause at the end of the sql with your conditions
-]]
---`
function norm.Db:select(sql: string, where: hashmap(string, string)): (sequence(hashmap(string, string)), string)
---`
  local sb: stringbuilder
  if next(where) then
    sb:write(" WHERE ")
    for k, v in pairs(where) do
      sb:writef("%s = %s AND ", norm.escape_identifier(k), norm.escape_literal(v))
    end
    sb:rollback(#(" AND "))
  end
  local final = "SELECT " .. sql .. sb:promote()
  return self:query(final)
end

--- ### norm.Db:insert
--[[-
This function inserts `values` into the table `tbl_name` returning the specified row of columns
If `returning` is not set, and empty sequence is returned
-]]
---`
function norm.Db:insert(
    tbl_name: string,
    values: hashmap(string, string),
    returning: facultative(string)
  ): (sequence(hashmap(string, string)), string)
---`
  local sb: stringbuilder
  sb:writef("INSERT INTO %s (", norm.escape_identifier(tbl_name))
  for k in pairs(values) do
    sb:writef("%s, ", norm.escape_identifier(k))
  end
  sb:rollback(2)
  sb:write(")")
  sb:write(" VALUES (")
  for _, v in pairs(values) do
    sb:writef("%s, ", norm.escape_literal(v))
  end
  sb:rollback(2)
  sb:write(")")
  ## if returning.type.is_string then
    if returning == "*" then
      sb:writef(" RETURNING %s", returning)
    else
      sb:writef(" RETURNING %s", norm.escape_identifier(returning))
    end
  ## end
  local sql = sb:promote()
  return self:query(sql)
end

--- ### norm.Db:update
--[[-
This function updates a table `tbl_name` with `values` where `conditions` returning the specified row of columns
If `returning` is not set, and empty sequence is returned
-]]
---`
function norm.Db:update(
    table_name: string,
    values: hashmap(string, string),
    conditions: hashmap(string, string),
    returning: facultative(string)
  ): (sequence(hashmap(string, string)), string)
---`
  local sb: stringbuilder
  sb:writef("UPDATE %s SET ", norm.escape_identifier(table_name))
  for k, v in pairs(values) do
    sb:writef("%s = %s, ", norm.escape_identifier(k), norm.escape_literal(v))
  end
  sb:rollback(2)
  if next(conditions) then
    sb:write(" WHERE ")
    for k, v in pairs(conditions) do
      sb:writef("%s = %s AND ", norm.escape_identifier(k), norm.escape_literal(v))
    end
    sb:rollback(#(" AND "))
  end
  ## if returning.type.is_string then
    if returning == "*" then
      sb:writef(" RETURNING %s", returning)
    else
      sb:writef(" RETURNING %s", norm.escape_identifier(returning))
    end
  ## end
  local final = sb:promote()
  return self:query(final)
end

--- ### norm.Db:update
--[[-
This function updates a table `tbl_name` with `values` where `conditions` returning the specified row of columns
If `returning` is not set, and empty sequence is returned
-]]
---`
function norm.Db:delete(table_name: string, conditions: hashmap(string, string)): string
---`
  local sb: stringbuilder
  sb:writef("DELETE FROM %s WHERE ", norm.escape_identifier(table_name))
  for k, v in pairs(conditions) do
    sb:writef("%s = %s AND ", norm.escape_identifier(k), norm.escape_literal(v))
  end
  sb:rollback(#(" AND "))
  local final = sb:promote()
  local rows, err = self:query(final)
  norm.destroy_rows(rows)
  return err
end

--- ### norm.Schema
--- This is a collection of types and function for creating and managing your database schema
---`
local norm.Schema = @record{}
---`

--- ### norm.Schema.Migration
--- This record is used in [norm.migrate](#normmigrate) to define a migration and what action is taken when that migration is called
---`
local norm.Schema.Migration = @record{
  name: string,
  fn: function(db: norm.Db): string
}
---`

--- ### norm.Schema.ColumnOptions
--- These are options used to modify how a column is generated in [norm.Schema.Column](#normschemacolumn)
---`
local norm.Schema.ColumnOptions = @record{
  default_val: string,
  is_null: boolean,
  unique: boolean,
  primary_key: boolean
}
---`

--- ### norm.Schema.ColumnType
--- This defines the type of a column in [norm.Schema.Column](#normschemacolumn)
---`
local norm.Schema.ColumnType = @enum{
  not_set = 0,
  integer,
  serial,
  numeric,
  real,
  text,
  blob,
  any
}
---`

local function schema_type_tostring(st: norm.Schema.ColumnType, opts: norm.Schema.ColumnOptions): string
  local sb: stringbuilder
  switch st do
    case norm.Schema.ColumnType.integer then
      sb:write("INTEGER ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case norm.Schema.ColumnType.serial then
      sb:write("SERIAL ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case norm.Schema.ColumnType.numeric then
      sb:write("NUMERIC ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case norm.Schema.ColumnType.real then
      sb:write("REAL ")
      if opts.default_val == "" and not opts.primary_key then opts.default_val = "0" end
    case norm.Schema.ColumnType.text then
      sb:write("TEXT ")
    case norm.Schema.ColumnType.blob then
      sb:write("BLOB ")
    case norm.Schema.ColumnType.any then
      sb:write("ANY ")
    else
      error("invalid Schema.Type: " .. st)
  end
  if not opts.is_null then
    sb:write("NOT NULL ")
  end
  if opts.default_val ~= "" then
    sb:write("DEFAULT " .. opts.default_val .. " ")
  end
  if opts.unique then
    sb:write("UNIQUE ")
  end
  if opts.primary_key then
    sb:write("PRIMARY KEY ")
  end
  sb:rollback(1)
  return sb:promote()
end

local function db_run(db: norm.Db, sql: string): string
  local _, err = db:query(sql)
  return err
end

local function db_start_transaction(db: norm.Db)
  switch db.kind do
    case norm.DbKind.sqlite then
      return sqlite.begin_transaction(db.conn.sqlite_db)
    case norm.DbKind.pg then
      return pg.begin_transaction(db.conn.pg_db)
    else
      error("UNIMPLEMENTED")
  end
  return "UNREACHABLE"
end

local function db_get_migrated(db: norm.Db): hashmap(string, boolean)
  local migrated: hashmap(string, boolean)
  local sql = "SELECT migration FROM \"norm_migrations\""
  local query_rows, query_err = db:query(sql)
  if query_err ~= "" then
    return migrated
  end
  for _, col in ipairs(query_rows) do
    migrated[string.copy(col["migration"])] = true
  end
  norm.destroy_rows(query_rows)
  return migrated
end

local function db_migrate(db: norm.Db, migrated: hashmap(string, boolean), migrations: sequence(norm.Schema.Migration)): (uinteger, string)
  local ran_migrations: uinteger
  defer
    migrated:destroy()
    migrations:destroy()
  end
  for _, v in ipairs(migrations) do
    if not migrated:has(v.name) then
      print("Migrating: " .. v.name)
      local vals: hashmap(string, string)
      vals["migration"] = v.name
      db:insert("norm_migrations", vals)
      for k in pairs(migrated) do
        k:destroy()
      end
      local create_err = v.fn(db)
      if create_err ~= "" then
        return 0, create_err
      end
      ran_migrations = ran_migrations + 1
    end
  end
  return ran_migrations, ""
end

local function db_commit_or_rollback(db: norm.Db, err: string, ran_migrations: uinteger): string
  switch db.kind do
    case norm.DbKind.sqlite then
      if err ~= "" then
        print("Failed to migrate: " .. err)
        sqlite.rollback(db.conn.sqlite_db)
        print("Rolling back")
      else
        sqlite.commit(db.conn.sqlite_db)
        print(("Ran %d migrations"):format(ran_migrations))
      end
    case norm.DbKind.pg then
      if err ~= "" then
        print("Failed to migrate: " .. err)
        pg.rollback(db.conn.pg_db)
        print("Rolling back")
      else
        pg.commit(db.conn.pg_db)
        print(("Ran %d migrations"):format(ran_migrations))
      end
    else
      error("UNIMPLEMENTED")
  end
  return err
end

--- ### norm.Schema.ColumnType
--- This defines the type of a column in [norm.Schema.Column](#normschemacolumn)
---`
local norm.Schema.Column = @record{
  name: string,
  type: norm.Schema.ColumnType,
  opts: norm.Schema.ColumnOptions
}
---`

--- ### norm.Schema.create_table
--[[-
This function creates a table, `name`, with the specified `columns` returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.create_table(db: norm.Db, name: string, columns: sequence(norm.Schema.Column)): string
---`
  assert(name ~= "", "table name cannot be an empty string")
  assert(#columns > 0, "Cannot have an empty list of columns")
  local sb: stringbuilder
  sb:writef("CREATE TABLE IF NOT EXISTS %s (\n", norm.escape_identifier(name))
  for i, v in ipairs(columns) do
    assert(v.name ~= "", "column name cannot be an empty string")
    sb:writef("  %s %s,\n", norm.escape_identifier(v.name), schema_type_tostring(v.type, v.opts))
  end
  sb:rollback(2)
  sb:write("\n)")
  local sql = sb:promote()

  return db_run(db, sql)
end

--- ### norm.Schema.drop_table
--[[-
This function drops a table, `name`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.drop_table(db: norm.Db, name: string): string
---`
  local sql = ('DROP TABLE IF EXISTS "%s";'):format(name)
  return db_run(db, sql)
end

--- ### norm.Schema.IndexOpts
--- These are options used to customise the create of an index in a table, see (norm.Schema.create_index)[normschemacreate_index]
---`
local norm.Schema.IndexOpts = @record{
  where: string,
  unique: boolean,
  if_not_exists: boolean
}
---`

--- ### norm.Schema.create_index
--[[-
This function adds new indexes to a table, `name`, returning an error string
It takes a list of `cols` and optional `opts` to create a new index
If no error occurs, the string is empty
-]]
---`
function norm.Schema.create_index(db: norm.Db, name: string, cols: sequence(string), opts: norm.Schema.IndexOpts): string
---`
  local sb: stringbuilder
  assert(#cols > 0)
  if opts.unique then
    sb:write("CREATE UNIQUE INDEX ")
  else
    sb:write("CREATE INDEX ")
  end
  if opts.if_not_exists then
    sb:write("IF NOT EXISTS ")
  end
  sb:writef('"%s', name)
  for _, v in ipairs(cols) do
    sb:writef("_%s", v)
  end
  sb:writef("_idx\" ON %s (", norm.escape_identifier(name))
  for i, v in ipairs(cols) do
    sb:write(norm.escape_identifier(v))
    if not (i == #cols) then
      sb:write(", ")
    end
  end
  sb:write(")")
  if opts.where ~= "" then
    sb:write(" WHERE ", opts.where)
  end
  local final = sb:promote()
  return db_run(db, final)
end

--- ### norm.Schema.drop_index
--[[-
This function drops an index from a table, `name`, returning an error string
It takes a list of `cols` to determine the index to drop
If no error occurs, the string is empty
-]]
---`
function norm.Schema.drop_index(db: norm.Db, name: string, cols: sequence(string)): string
---`
  local sb: stringbuilder
  sb:write("DROP INDEX IF EXISTS \"")
  sb:write(name)
  for _, v in ipairs(cols) do
    sb:writef("_%s", v)
  end
  sb:writef("_idx\"")

  local final = sb:promote()
  return db_run(db, final)
end

--- ### norm.Schema.add_column
--[[-
This function adds a new `col` to a table, `tbl_name`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.add_column(db: norm.Db, tbl_name: string, col: norm.Schema.Column): string
---`
  assert(col.name ~= "", "column name cannot be an empty string")
  local sql = ("ALTER TABLE %s ADD COLUMN %s %s"):format(
    norm.escape_identifier(tbl_name),
    norm.escape_identifier(col.name),
    schema_type_tostring(col.type, col.opts)
  )
  return db_run(db, sql)
end

--- ### norm.Schema.drop_column
--[[-
This function drops a `col` from a table, `tbl_name`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.drop_column(db: norm.Db, tbl_name: string, col_name: string): string
---`
  local sql = ("ALTER TABLE %s DROP COLUMN %s"):format(
    norm.escape_identifier(tbl_name),
    norm.escape_identifier(col_name)    
  )
  return db_run(db, sql)
end

--- ### norm.Schema.rename_column
--[[-
This function renames a `col` from a table, `tbl_name`, replacing the `old_col_name` with the `new_col_name`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.rename_column(db: norm.Db, tbl_name: string, old_col_name: string, new_col_name: string): string
---`
  local sql = ("ALTER TABLE %s RENAME COLUMN %s to %s"):format(
    norm.escape_identifier(tbl_name),
    norm.escape_identifier(old_col_name),    
    norm.escape_identifier(new_col_name)    
  )
  return db_run(db, sql)
end

--- ### norm.Schema.rename_table
--[[-
This function renames a table replacing the `old_tbl_name` with the `new_tbl_name`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Schema.rename_table(db: norm.Db, old_tbl_name: string, new_tbl_name: string): string
---`
  local sql = ("ALTER TABLE %s RENAME to %s"):format(
    norm.escape_identifier(old_tbl_name),
    norm.escape_identifier(new_tbl_name)    
  )
  return db_run(db, sql)
end

--- ### norm.migrate
--[[-
This function runs all `migrations`, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.migrate(db: norm.Db, migrations: sequence(norm.Schema.Migration)): string
---`
  print("Running migrations")
  if not db:table_exists("norm_migrations") then
    print("Creating migrations table")
    norm.Schema.create_table(db, "norm_migrations", {
      {"migration", norm.Schema.ColumnType.text, { primary_key = true }}
    })
  end
  local err = db_start_transaction(db)
  local migrated = db_get_migrated(db)
  local ran_migrations, err = db_migrate(db, migrated, migrations)
  return db_commit_or_rollback(db, err, ran_migrations)
end

--- ### norm.Model
--- This is used to interact with a particular table directly with more specific functions
---`
local norm.Model = @record{
  db: norm.Db,
  name: string,
}
---`

--- ### norm.Model.Inst
--[[-
Model Instance
This is meant to represent a single row in a model's table
-]]
---`
local norm.Model.Inst = @record{
  db: norm.Db,
  tbl_name: string,
  row: hashmap(string, string)
}
---`

--- ### norm.Model.new
--[[-
This function runs all `migrations`, returning a new [norm.Model](#normmodel) object and an error string
If no error occurs, the string is empty
-]]
---`
function norm.Model.new(db: norm.Db, name: string): (norm.Model, string)
---`
  if not db:table_exists(name) then
    return {}, ("Table `%s` does not exist in the database"):format((name))
  end
  return {
    db = db,
    name = name
  }, ""
end

--- ### norm.Model:find
--[[-
This function attempts to find a row based on the `conditions`, returning a [norm.model.Inst](#normmodelinst) object and an error string
If no error occurs, the string is empty
-]]
---`
function norm.Model:find(conditions: hashmap(string, string)): (norm.Model.Inst, string)
---`
  local sb: stringbuilder
  sb:writef("SELECT * FROM %s ", norm.escape_identifier(self.name))
  local row: hashmap(string, string)
  if next(conditions) then
    sb:write(" WHERE ")
    for k, v in pairs(conditions) do
      sb:writef("%s = %s AND ", norm.escape_identifier(k), norm.escape_literal(v))
    end
    sb:rollback(#(" AND "))
  end
  sb:write(" LIMIT 1")
  local rows, err = self.db:query(sb:promote())
  if err ~= "" then
    return {}, err
  end
  row = rows[1]
  return {
    db = self.db,
    tbl_name = self.name,
    row = row
  }, ""
end

--- ### norm.Model:select
--[[-
This function attempts to find rows based on the `conditions`, returning a sequence of [norm.model.Inst](#normmodelinst) objects and an error string
If no error occurs, the string is empty
-]]
---`
function norm.Model:select(conditions: hashmap(string, string)): (sequence(norm.Model.Inst), string)
---`
  local sql = "* FROM " .. norm.escape_identifier(self.name)
  local result: sequence(norm.Model.Inst)
  local rows, err = self.db:select(sql, conditions)
  if err ~= "" then
    return {}, err
  end
  if #rows < 1 then
    return {}, "No rows were found with the query"
  end
  for _, row in ipairs(rows) do
    result:push({      
      db = self.db,
      tbl_name = self.name,
      row = row
    })
  end
  return result, ""
end

--- ### norm.Model:create
--[[-
This function inserts `values` into the model's table, returning a [norm.model.Inst](#normmodelinst) object and an error string
If `returning` is not set, and empty object is returned
If no error occurs, the string is empty
-]]
---`
function norm.Model:create(values: hashmap(string, string), returning: facultative(string)): (norm.Model.Inst, string)
---`
  ## if not returning.type.is_string then
    local returning = "*"
  ## end
  local rows, err = self.db:insert(self.name, values, returning)
  if err ~= "" then
    return {}, err
  end
  if #rows < 1 then
    return {}, "No rows were found with the query"
  end
  return {      
    db = self.db,
    tbl_name = self.name,
    row = rows[1]
  }, ""
end

--- ### norm.Model.Inst:update
--[[-
This function updates the row instance with `values` into the model's table, returning a [norm.model.Inst](#normmodelinst) object and an error string
If `returning` is not set, and empty object is returned
If no error occurs, the string is empty
-]]
---`
function norm.Model.Inst:update(values: hashmap(string, string), returning: facultative(string)): (norm.Model.Inst, string)
---`
  ## if not returning.type.is_string then
    local returning = "*"
  ## end
  local rows, err = self.db:update(self.tbl_name, values, self.row, returning)
  if err ~= "" then
    return {}, err
  end
  if #rows < 1 then
    return {}, "No rows were found with the query"
  end
  return {      
    db = self.db,
    tbl_name = self.tbl_name,
    row = rows[1]
  }, ""
end

--- ### norm.Model.Inst:delete
--[[-
This function deletes the row instance from the model's table, returning an error string
If no error occurs, the string is empty
-]]
---`
function norm.Model.Inst:delete(): string
---`
  return self.db:delete(self.tbl_name, self.row)
end

--- ### norm.Model.Inst:get_col
--[[-
This function get's the value of the col by `name` if it exists, returning the value and an error string
If no error occurs, the string is empty
-]]
---`
function norm.Model.Inst:get_col(name: string): (string, string)
---`
  local ok, v = self.row:has_and_get(name)
  if ok then
    return v, ""
  end
  return "", "name does not exist in row"
end

return norm
