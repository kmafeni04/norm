require "io"
require "os"

require "thirdparty.inline_map"

## local function mild_assert(cond, message)
  do
    if not #[cond]# then
      io.stderr:write(("\27[1m%s:%d: \27[31mmild assert\27[0m: %s\27[0m\n"):format(#[cond:location().srcname]#, #[cond:location().lineno]#, #[message or "assert hit"]#))
      goto ending
    end
  end
## end

local norm = require "norm"

## if SQLITE_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.sqlite,
  conn = {
    sqlite = {
      name = "test.db"
    }
  }
})
## elseif PG_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.pg,
  conn = {
    pg = {
      name = "test_db",
      user = "test_user",
      password = "test_password",
      host = "localhost",
      port = 5432,
    }
  }
})
## elseif MYSQL_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.mysql,
  conn = {
    mysql = {
      name = "test_db",
      user = "test_user",
      password = "test_password",
      host = "localhost",
      port = 5432,
    }
  }
})
## else
  ## static_error("DB kind was not defined")
## end

mild_assert!(err == "", err)

-- Migration tests
local schema = norm.Schema
local type = schema.ColumnType
local err = norm.migrate(db, inline_map!(string, norm.Schema.MigrationFn, {
  ["1"] = function(db: norm.Db): string
    local err: string
    switch db.kind do
      case norm.DbKind.sqlite then
        err = schema.create_table(db, "users", {
          {"id", type.integer, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer}
        }, { strict = true })
      case norm.DbKind.pg then
        err = schema.create_table(db, "users", {
          {"id", type.serial, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer},
        })
      case norm.DbKind.mysql then
        err = schema.create_table(db, "users", {
          {"id", type.id, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer},
        })
      else
        err = "UNKONWN DB kind for migration 1"
    end
    if err ~= "" then
      return err
    end

    return ""
  end,

  ["2"] = function(db: norm.Db): string
    local err: string
    switch db.kind do
      case norm.DbKind.sqlite then
        err = schema.create_table(db, "players", {
          {"id", type.integer, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer}
        })
      case norm.DbKind.pg then
        err = schema.create_table(db, "players", {
          {"id", type.serial, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer}
        })
      case norm.DbKind.mysql then
        err = schema.create_table(db, "players", {
          {"id", type.id, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer}
        })
      else
        err = "UNKONWN DB kind for migration 2"
    end
    if err ~= "" then
      return err
    end
    local err = schema.create_index(db, "users", {"name", "age"}, {unique = true})
    if err ~= "" then
      return err
    end

    return ""
  end,

  ["3"] = function(db: norm.Db): string
    local err = schema.drop_index(db, "users", {"name", "age"})
    if err ~= "" then
      return err
    end
    local err = schema.add_column(db, "users", {"height", type.integer})
    if err ~= "" then
      return err
    end
    local err = schema.rename_column(db, "users", "height", "length")
    if err ~= "" then
      return err
    end
    local err = schema.drop_column(db, "users", "length")
    if err ~= "" then
      return err
    end
    local err = schema.rename_table(db, "players", "sportsmen")
    if err ~= "" then
      return err
    end
    local err = schema.drop_table(db, "sportsmen")
    if err ~= "" then
      return err
    end

    return ""
  end,

  ["4"] = function(db: norm.Db): string
    local err: string
    switch db.kind do
      case norm.DbKind.sqlite then
        err = schema.create_table(db, "players", {
          {"id", type.integer, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer},
          {"user_id", type.integer}
        })
      case norm.DbKind.pg then
        err = schema.create_table(db, "players", {
          {"id", type.serial, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer},
          {"user_id", type.integer}
        })
      case norm.DbKind.mysql then
        err = schema.create_table(db, "players", {
          {"id", type.id, { primary_key = true }},
          {"name", type.text, { unique = true }},
          {"age", type.integer},
          {"user_id", type.integer}
        })
      else
        err = "UNKONWN DB kind for migration 4"
    end
    return err
  end
}))
mild_assert!(err == "", err)

-- Generic tests
local rows, err = db:insert("users", inline_map!(string, string, {
  name = "James",
  age = "21"
}))
mild_assert!(err == "", err)

local rows, err = db:select("* FROM users", inline_map!(string, string, {
  name = "James",
  age = "21"
}))

mild_assert!(err == "", err)

local err = db:delete("users", inline_map!(string, string, {
  name = "James",
  age = "21"
}))

mild_assert!(err == "", err)

local model = norm.Model
local Users, err = model.new(&db, "users", "Users")
mild_assert!(err == "", err)

local user, err = Users:create(inline_map!(string, string, {
  name = "James",
  age = "21"
}))

mild_assert!(err == "", err)

local user, err = user:update(inline_map!(string, string, {
  name = "John",
}))

mild_assert!(err == "", err)

local err = user:delete()
mild_assert!(err == "", err)

Users:destroy()
Users = nilptr

-- Relations test
local model = norm.Model
local Users, err = model.new(&db, "users", "Users",{
  rels = {
    {
      kind = norm.RelationKind.has_one,
      rel = {
        name = "player",
        model_name = "Players",
      }
    }
  }
})
mild_assert!(err == "", err)

local user, err = Users:create(inline_map!(string, string, {
  name = "James",
  age = "21"
}))

mild_assert!(err == "", err)

local Players, err = model.new(&db, "players", "Players", {
  rels = {
    {
      kind = norm.RelationKind.belongs_to,
      rel = {
        name = "user",
        model_name = "Users",
      }
    }
  }
})
mild_assert!(err == "", err)

local player, err = Players:create(inline_map!(string, string, {
  name = "Jack",
  age = "25",
  user_id = user:get_col("id"),
}))

mild_assert!(err == "", err)

local user, err = player:get_belongs_to("user")
mild_assert!(err == "", err)

local user_name, err = user:get_col("name")
mild_assert!(err == "", err)
mild_assert!(user_name == "James")

local player, err = user:get_has_one("player")
mild_assert!(err == "", err)

local player_name, err = player:get_col("name")
mild_assert!(err == "", err)
mild_assert!(player_name == "Jack")

Users:destroy()

local Users, err = model.new(&db, "users", "Users",{
  rels = {
    {
      kind = norm.RelationKind.has_many,
      rel = {
        name = "player",
        model_name = "Players",
      }
    }
  }
})
mild_assert!(err == "", err)

local user, err = Users:find(inline_map!(string, string, {
  name = "James",
  age = "21"
}))
mild_assert!(err == "", err)

local player, err = Players:create(inline_map!(string, string, {
  name = "John",
  age = "31",
  user_id = user:get_col("id")
}))
mild_assert!(err == "", err)

local players, err = user:get_has_many("player")
mild_assert!(err == "", err)

local player1_name, err = players[1]:get_col("name")
mild_assert!(err == "", err)
mild_assert!(player1_name == "Jack")

local player2_name, err = players[2]:get_col("name")
mild_assert!(err == "", err)
mild_assert!(player2_name == "John")

local count, err = Users:count()
mild_assert!(err == "", err)
mild_assert!(count == 1)

local users, err = Users:select(nil, {
  fields = {norm.escape_identifier("name")},
  extra_sql = "ORDER BY name ASC"
})
mild_assert!(err == "", err)
mild_assert!(users[1]:get_col("age") == "")
mild_assert!(users[1]:get_col("name") ~= "")

for i = 1, 20 do
  local player, err = Players:create(inline_map!(string, string, {
    name = "Player" .. i,
    age = tostring(20 + i),
    user_id = users[1]:get_col("id")
  }))
  mild_assert!(err == "", err)
end

local PlayersPaginator, err = Players:offset_paginated(inline_map!(string, string, { user_id = users[1]:get_col("id") }))
mild_assert!(err == "", err)

local players, err = PlayersPaginator:get_page(1)
mild_assert!(err == "", err)
mild_assert!(#players == 10)

local players, err = PlayersPaginator:get_page(2)
mild_assert!(err == "", err)
mild_assert!(#players == 10)

::ending::
switch db.kind do
  case norm.DbKind.sqlite then
    local ok, err = os.remove("test.db")
    assert(ok, err)
  case norm.DbKind.pg then
    local _, err = db:query("DROP SCHEMA public CASCADE; CREATE SCHEMA public; GRANT ALL ON SCHEMA public TO postgres; GRANT ALL ON SCHEMA public TO public;")
    assert(err == "", err)
  case norm.DbKind.mysql then
    local _, err = db:query("DROP DATABASE IF EXISTS test_db; CREATE DATABASE test_db; GRANT ALL PRIVILEGES ON test_db.* TO 'test_user'@'localhost'; FLUSH PRIVILEGES;")
    assert(err == "", err)
end

