require "io"
require "os"
## local function mild_assert(cond, message)
  do
    if not #[cond]# then
      io.stderr:write(("%s:%d: mild assert: %s\n"):format(#[cond:location().srcname]#, #[cond:location().lineno]#, #[message or "assert hit"]#))
      goto ending
    end
  end
## end

local norm = require "norm"

## if SQLITE_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.sqlite,
  conn = {
    sqlite = {
      name = "test.db"
    }
  }
})
## elseif PG_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.pg,
  conn = {
    pg = {
      name = "test_db",
      user = "test_user",
      password = "test_password",
      host = "localhost",
      port = 5432,
    }
  }
})
## elseif MYSQL_TEST then
local db, err = norm.Db.new({
  kind = norm.DbKind.mysql,
  conn = {
    mysql = {
      name = "test_db",
      user = "test_user",
      password = "test_password",
      host = "localhost",
      port = 5432,
    }
  }
})
## else
  ## static_error("DB kind was not defined")
## end

mild_assert!(err == "", err)

local migrations: hashmap(string, norm.Schema.Migration)
local schema = norm.Schema
local type = schema.ColumnType
local err = norm.migrate(db, {
  {
    "1",
    function(db: norm.Db): string
      local err: string
      switch db.kind do
        case norm.DbKind.sqlite then
          err = schema.create_table(db, "users", {
            {"id", type.integer, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer}
          })
        case norm.DbKind.pg then
          err = schema.create_table(db, "users", {
            {"id", type.serial, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer},
          })
        case norm.DbKind.mysql then
          err = schema.create_table(db, "users", {
            {"id", type.id, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer},
          })
        else
          err = "UNKONWN DB kind for migration 1"
      end
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "2",
    function(db: norm.Db): string
      local err: string
      switch db.kind do
        case norm.DbKind.sqlite then
          local err = schema.create_table(db, "players", {
            {"id", type.integer, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer}
          })
        case norm.DbKind.pg then
          local err = schema.create_table(db, "players", {
            {"id", type.serial, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer}
          })
        case norm.DbKind.mysql then
          local err = schema.create_table(db, "players", {
            {"id", type.id, { primary_key = true }},
            {"name", type.text, { unique = true }},
            {"age", type.integer}
          })
        else
          err = "UNKONWN DB kind for migration 2"
      end
      if err ~= "" then
        return err
      end
      local err = schema.create_index(db, "users", {"name", "age"}, {unique = true})
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "3",
    function(db: norm.Db): string
      local err = schema.drop_index(db, "users", {"name", "age"})
      if err ~= "" then
        return err
      end
      local err = schema.add_column(db, "users", {"height", type.integer})
      if err ~= "" then
        return err
      end
      local err = schema.rename_column(db, "users", "height", "length")
      if err ~= "" then
        return err
      end
      local err = schema.drop_column(db, "users", "length")
      if err ~= "" then
        return err
      end
      local err = schema.rename_table(db, "players", "sportsmen")
      if err ~= "" then
        return err
      end
      local err = schema.drop_table(db, "sportsmen")
      if err ~= "" then
        return err
      end

      return ""
    end
  }
})
mild_assert!(err == "", err)

local users_insert: hashmap(string, string)
users_insert["name"] = "James"
users_insert["age"] = "21"
local rows, err = db:insert("users", users_insert)
mild_assert!(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
mild_assert!(err == "", err)

local users_delete: hashmap(string, string)
users_delete["name"] = "James"
users_delete["age"] = "21"
local err = db:delete("users", users_delete)
mild_assert!(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
mild_assert!(err == "", err)

local model = norm.Model
local Users, err = model.new(db, "users", "Users")
mild_assert!(err == "", err)

local users_create: hashmap(string, string)
users_create["name"] = "James"
users_create["age"] = "21"
local user, err = Users:create(users_create)
mild_assert!(err == "", err)

local users_update: hashmap(string, string)
users_update["name"] = "John"
local user, err = user:update(users_update)
mild_assert!(err == "", err)

local err = user:delete()
mild_assert!(err ~= "", err)

::ending::
switch db.kind do
  case norm.DbKind.sqlite then
    local ok, err = os.remove("test.db")
    assert(ok, err)
  case norm.DbKind.pg then
    local _, err = db:query("DROP SCHEMA public CASCADE; CREATE SCHEMA public; GRANT ALL ON SCHEMA public TO postgres; GRANT ALL ON SCHEMA public TO public;")
    assert(err == "", err)
  case norm.DbKind.mysql then
    local _, err = db:query("DROP DATABASE IF EXISTS test_db; CREATE DATABASE test_db; GRANT ALL PRIVILEGES ON test_db.* TO 'test_user'@'localhost'; FLUSH PRIVILEGES;")
    assert(err == "", err)
end

