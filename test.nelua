local norm = require "norm"

local db, err = norm.new({
  kind = norm.DbKind.sqlite,
  sqlite = {
    name = "hello.db"
  }
})

assert(err == "", err)

local migrations: hashmap(string, norm.Schema.Migration)
local schema = norm.Schema
local type = schema.ColumnType
local err = norm.migrate(db, {
  {
    "1",
    function(db: norm.Db): string
      local err = schema.create_table(db, "users", {
        {"id", type.integer, { primary_key = true }},
        {"name", type.text, { unique = true }},
        {"age", type.integer}
      })
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "2",
    function(db: norm.Db): string
      local err = schema.create_table(db, "players", {
        {"id", type.integer, { primary_key = true }},
        {"name", type.text, { unique = true }},
        {"age", type.integer}
      })
      if err ~= "" then
        return err
      end
      local err = schema.create_index(db, "users", {"name", "age"}, {unique = true})
      if err ~= "" then
        return err
      end

      return ""
    end
  },
  {
    "3",
    function(db: norm.Db): string
      local err = schema.drop_index(db, "users", {"name", "age"})
      if err ~= "" then
        return err
      end
      local err = schema.add_column(db, "users", {"height", type.integer})
      if err ~= "" then
        return err
      end
      local err = schema.rename_column(db, "users", "height", "length")
      if err ~= "" then
        return err
      end
      local err = schema.drop_column(db, "users", "length")
      if err ~= "" then
        return err
      end
      local err = schema.rename_table(db, "players", "sportsmen")
      if err ~= "" then
        return err
      end
      local err = schema.drop_table(db, "sportsmen")
      if err ~= "" then
        return err
      end

      return ""
    end
  }
})
assert(err == "", err)

local users_insert: hashmap(string, string)
users_insert["name"] = "James"
users_insert["age"] = "21"
local err = db:insert("users", users_insert)
assert(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
assert(err == "", err)

for i, cols in ipairs(rows) do
  for k, v in pairs(cols) do
    print(k, v)
  end
end
norm.destroy_rows(rows)

local users_delete: hashmap(string, string)
users_delete["name"] = "James"
users_delete["age"] = "21"
local err = db:delete("users", users_delete)
assert(err == "", err)

local users_select: hashmap(string, string)
users_select["name"] = "James"
users_select["age"] = "21"
local rows, err = db:select("* FROM users", users_select)
assert(err == "", err)

for i, cols in ipairs(rows) do
  for k, v in pairs(cols) do
    print(k, v)
  end
end
norm.destroy_rows(rows)

print(db:table_exists("users"))
