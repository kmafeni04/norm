require "..thirdparty.sqlite"

local AnsiColor = require "ansicolor-nelua.ansicolor"
local logger = require ".logger"

local M = @record{}

local M.type: type = sqlite3

function M.new(name: string): (*sqlite3, string)
  local sqlite_db: *sqlite3
  local rc: cint

  if name == "" then return sqlite_db, "Database name cannot be an empty string" end

  rc = sqlite3_open(name , &sqlite_db)

  if rc ~= SQLITE_OK then
    sqlite3_close(sqlite_db)
    return sqlite_db, ("Cannot open database: %s \n"):format(sqlite3_errmsg(sqlite_db))
  end
  return sqlite_db, ""
end

function M.destroy(db: *sqlite3)
  sqlite3_close(db)
end

function M.begin_transaction(db: *sqlite3): string
  local err_msg: cstring
  local rc = sqlite3_exec(db, "BEGIN TRANSACTION;", nilptr, nilptr, &err_msg)
  defer sqlite3_free(err_msg) end
  if rc ~= SQLITE_OK then
    local str: string = string.copy(err_msg)
    return str
  end
  return ""
end

function M.commit(db: *sqlite3)
  local err_msg: cstring
  local rc = sqlite3_exec(db, "COMMIT;", nilptr, nilptr, &err_msg)
  defer sqlite3_free(err_msg) end
  if rc ~= SQLITE_OK then
    local str: string = string.copy(err_msg)
    return str
  end
  return ""
end

function M.rollback(db: *sqlite3)
  local err_msg: cstring
  local rc = sqlite3_exec(db, "ROLLBACK;", nilptr, nilptr, &err_msg)
  defer sqlite3_free(err_msg) end
  if rc ~= SQLITE_OK then
    local str: string = string.copy(err_msg)
    return str
  end
  return ""
end

function M.query(log: logger.NotSetOrBool, db: *sqlite3, sql: string): (sequence(hashmap(string, string)), string)
  local log_str = AnsiColor.new("SQL: "):Cyan():Bright():tostring() .. AnsiColor.new(sql):Magenta():tostring()
  logger.log(log, log_str)

  local rows: sequence(hashmap(string, string))

  local stmt: *sqlite3_stmt
  local rc = sqlite3_prepare_v2(db, sql, -1, &stmt, nilptr)
  if rc ~= SQLITE_OK then
    return rows, string.format("Failed to prepare statement: %s", sqlite3_errmsg(db))
  end

  defer sqlite3_finalize(stmt) end

  while true do
    rc = sqlite3_step(stmt)
    if rc ~= SQLITE_ROW then
      break
    end
    local ncols = sqlite3_column_count(stmt)
    local cols: hashmap(string, string)
    for i = 0, <ncols do
      local text: cstring = (@cstring)(sqlite3_column_text(stmt, i))
      local name: cstring = (@cstring)(sqlite3_column_name(stmt, i))
      cols[string.copy(name)] = (text ~= nilptr and string.copy(text) or "NULL")
    end
    rows:push(cols)
  end

  if rc ~= SQLITE_DONE then
    return rows, ("SQLite error: %s"):format(sqlite3_errmsg(db))
  end

  return rows, ""
end

return M
